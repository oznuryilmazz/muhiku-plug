!(function (p, c) {
  var a,
    m = {
      init: function () {
        p(document).ready(function (e) {
          e("mhk-panel-integrations-button a").hasClass("active") ||
            (e("#muhiku-plug-panel-integrations")
              .find(".muhiku-plug-panel-sidebar a")
              .first()
              .addClass("active"),
            e("#muhiku-plug-panel-integrations")
              .find(".muhiku-plug-panel-sidebar a")
              .hasClass("active") &&
              e("#muhiku-plug-panel-integrations")
                .find(".muhiku-plug-panel-sidebar a")
                .next(".muhiku-plug-active-connections")
                .first()
                .addClass("active"),
            e(".muhiku-plug-panel-content")
              .find(".mhk-panel-content-section")
              .first()
              .addClass("active"));
        }),
          p(document).ready(function (o) {
            "1" === o(".muhiku-plug-min-max-date-format input").val() &&
              (o(".muhiku-plug-min-date")
                .addClass("flatpickr-field")
                .flatpickr({
                  disableMobile: !0,
                  onChange: function (e, t, i) {
                    o(".muhiku-plug-min-date").val(t);
                  },
                  onOpen: function (e, t, i) {
                    i.set("maxDate", o(".muhiku-plug-max-date").val());
                  },
                }),
              o(".muhiku-plug-max-date")
                .addClass("flatpickr-field")
                .flatpickr({
                  disableMobile: !0,
                  onChange: function (e, t, i) {
                    o(".muhiku-plug-max-date").val(t);
                  },
                  onOpen: function (e, t, i) {
                    i.set("minDate", o(".muhiku-plug-min-date").val());
                  },
                }));
          }),
          p("mhk-panel-payments-button a").hasClass("active") ||
            (p("#muhiku-plug-panel-payments")
              .find(".muhiku-plug-panel-sidebar a")
              .first()
              .addClass("active"),
            p(".muhiku-plug-panel-content")
              .find(".mhk-payment-setting-content")
              .first()
              .addClass("active")),
          p(document.body)
            .find("#copy-shortcode")
            .on("click", this.copyShortcode)
            .on("aftercopy", this.copySuccess)
            .on("aftercopyfailure", this.copyFail),
          p(document.body)
            .find(".mhk-copy-shortcode")
            .each(function () {
              p(this)
                .on("click", m.copyShortcode)
                .on("aftercopy", m.copySuccess)
                .on("aftercopyfailure", m.copyFail);
            }),
          p(document).ready(m.ready),
          p(window).on("load", m.load),
          p(document.body)
            .on("mhk-init-builder-fields", function () {
              m.bindFields();
            })
            .trigger("mhk-init-builder-fields"),
          p(document.body)
            .on("adjust_builder_width", function () {
              var e = p("#adminmenuwrap").width();
              p("#muhiku-plug-builder-form").css({
                width: "calc(100% - " + e + "px)",
              });
            })
            .trigger("adjust_builder_width"),
          p(document.body).on("click", "#collapse-button", function () {
            p("#muhiku-plug-builder-form").width(""),
              p(document.body).trigger("adjust_builder_width");
          }),
          p(window)
            .on("resize orientationchange", function () {
              clearTimeout(void 0),
                setTimeout(function () {
                  p("#muhiku-plug-builder").width(""),
                    p(document.body).trigger("adjust_builder_width");
                }, 250);
            })
            .trigger("resize");
      },
      copyShortcode: function (e) {
        mhkClearClipboard(),
          mhkSetClipboard(
            p(this).closest(".mhk-shortcode-field").find("input").val(),
            p(this)
          ),
          e.preventDefault();
      },
      copySuccess: function () {
        p(this)
          .tooltipster("content", p(this).attr("data-copied"))
          .trigger("mouseenter")
          .on("mouseleave", function () {
            var e = p(this);
            setTimeout(function () {
              e.tooltipster("content", e.attr("data-tip"));
            }, 1e3);
          });
      },
      copyFail: function () {
        p(this).closest(".mhk-shortcode-field").find("input").focus().select();
      },
      load: function () {
        p(".muhiku-plug-overlay").fadeOut();
      },
      ready: function () {
        var e, t;
        (a = p("#muhiku-plug-builder")),
          m.bindUIActions(),
          m.bindEditActions(),
          (jconfirm.defaults = {
            closeIcon: !0,
            backgroundDismiss: !0,
            escapeKey: !0,
            animationBounce: 1,
            useBootstrap: !1,
            theme: "modern",
            boxWidth: "400px",
            columnClass: "mhk-responsive-class",
          }),
          "undefined" != typeof PerfectScrollbar &&
            ((e = p(".muhiku-plug-tab-content")),
            (t = p(".muhiku-plug-panel")),
            1 <= e.length &&
              (window.mhk_tab_scroller = new PerfectScrollbar(
                ".muhiku-plug-tab-content",
                { suppressScrollX: !0 }
              )),
            t.each(function () {
              var e = p(this),
                t = e.attr("id");
              1 <= e.find(".muhiku-plug-panel-sidebar").length &&
                (window.mhk_setting_scroller = new PerfectScrollbar(
                  "#" + t + " .muhiku-plug-panel-sidebar"
                ));
            })),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-limit_enabled input",
            function (e) {
              m.updateTextFieldsLimitControls(
                p(e.target)
                  .parents(".muhiku-plug-field-option-row-limit_enabled")
                  .data().fieldId,
                e.target.checked
              );
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-select .muhiku-plug-field-option-row-enhanced_select input",
            function (e) {
              m.enhancedSelectFieldStyle(
                p(e.target)
                  .parents(".muhiku-plug-field-option-row-enhanced_select")
                  .data().fieldId,
                e.target.checked
              );
            }
          ),
          a.on(
            "click",
            ".muhiku-plug-field-option-row-choices .muhiku-plug-btn-group span",
            function (e) {
              var t;
              p(this).hasClass("upgrade-modal") &&
              "checkbox" === p(this).data("type")
                ? (p(this).parent().find("span").addClass("is-active"),
                  p(this).removeClass("is-active"),
                  m.updateEnhandedSelectField(
                    p(e.target)
                      .parents(".muhiku-plug-field-option-row-choices")
                      .data().fieldId,
                    !1
                  ))
                : (p(this).parent().find("span").removeClass("is-active"),
                  p(this).addClass("is-active"),
                  m.updateEnhandedSelectField(
                    p(e.target)
                      .parents(".muhiku-plug-field-option-row-choices")
                      .data().fieldId,
                    "multiple" === p(this).data("selection")
                  )),
                "multiple" === p(this).data("selection") &&
                "checkbox" === p(this).data("type") &&
                p(this).hasClass("is-active")
                  ? ((t = p(this).parent().parent().data("field-id")),
                    p(
                      "#muhiku-plug-field-option-row-" + t + "-select_all"
                    ).show())
                  : ((t = p(this).parent().parent().data("field-id")),
                    p(
                      "#muhiku-plug-field-option-row-" + t + "-select_all"
                    ).hide());
            }
          ),
          p(document.body).on(
            "click",
            '.muhiku-plug-field, .muhiku-plug-field-select[data-field-type="select"]',
            function () {
              a.find(
                ".muhiku-plug-field-option-row-choices .muhiku-plug-btn-group span"
              ).each(function () {
                var e = p(this).parent().parent().data("field-id");
                "multiple" === p(this).data("selection") &&
                "checkbox" === p(this).data("type") &&
                p(this).hasClass("is-active")
                  ? p("#muhiku-plug-field-option-" + e + "-select_all")
                      .parent()
                      .show()
                  : p("#muhiku-plug-field-option-" + e + "-select_all")
                      .parent()
                      .hide();
              });
            }
          ),
          a.on("keyup", ".muhiku-plug-search-fields", function () {
            var t = p(this).val().toLowerCase();
            p(".mhk-registered-item").each(function () {
              var e = p(this);
              (field_type = e.data("field-type")),
                (field_label = e.text().toLowerCase()),
                -1 < field_type.search(t) || -1 < field_label.search(t)
                  ? (e.addClass("mhk-searched-item"), e.show())
                  : (e.removeClass("mhk-searched-item"), e.hide());
            }),
              p(".muhiku-plug-add-fields-group").each(function () {
                p(this).find(".mhk-registered-item.mhk-searched-item").length <=
                0
                  ? p(this).hide()
                  : p(this).show();
              }),
              p(".mhk-registered-item.mhk-searched-item").length
                ? p(".muhiku-plug-fields-not-found").addClass("hidden")
                : p(".muhiku-plug-fields-not-found").removeClass("hidden");
          }),
          p(document).trigger("everest_forms_ready");
      },
      updateTextFieldsLimitControls: function (e, t) {
        t
          ? p(
              "#muhiku-plug-field-option-row-" + e + "-limit_controls"
            ).removeClass("muhiku-plug-hidden")
          : p(
              "#muhiku-plug-field-option-row-" + e + "-limit_controls"
            ).addClass("muhiku-plug-hidden");
      },
      enhancedSelectFieldStyle: function (e, t) {
        var i = p("#muhiku-plug-field-" + e + " .primary-input"),
          e = p("#muhiku-plug-field-option-" + e + "-enhanced_select").is(
            ":checked"
          );
        t && e && i.prop("multiple")
          ? (i.addClass("mhk-enhanced-select"),
            p(document.body).trigger("mhk-enhanced-select-init"))
          : (i.removeClass("mhk-enhanced-select enhanced"),
            i.filter(".select2-hidden-accessible").selectWoo("destroy"));
      },
      updateEnhandedSelectField: function (e, t) {
        var i = p("#muhiku-plug-field-" + e + " .primary-input"),
          o = i.find(".placeholder"),
          n = p("#muhiku-plug-field-option-" + e + "-multiple_choices"),
          s = p(
            "#muhiku-plug-field-option-row-" + e + "-choices input.default"
          ),
          r = s.filter(":checked");
        n.val(t ? 1 : 0),
          i.prop("multiple", t),
          s.prop("type", t ? "checkbox" : "radio"),
          !t &&
            r.length &&
            (s.prop("checked", !1), p(r.get(0)).prop("checked", !0)),
          o.length && t && o.prop("selected", !t),
          m.enhancedSelectFieldStyle(e, t);
      },
      bindUIActions: function () {
        m.bindDefaultTabs(),
          m.checkEmptyGrid(),
          m.bindFields(),
          m.bindFormPreview(),
          m.bindFormPreviewWithKeyEvent(),
          m.bindFormEntriesWithKeyEvent(),
          m.bindGridSwitcher(),
          m.bindFieldSettings(),
          m.bindFieldDelete(),
          m.bindFieldDeleteWithKeyEvent(),
          m.bindCloneField(),
          m.bindSaveOption(),
          m.bindSaveOptionWithKeyEvent(),
          m.bindAddNewRow(),
          m.bindRemoveRow(),
          m.bindFormSettings(),
          m.bindFormEmail(),
          m.bindFormIntegrations(),
          m.bindFormPayment(),
          m.choicesInit(),
          m.bindToggleHandleActions(),
          m.bindLabelEditInputActions(),
          m.bindSyncedInputActions(),
          m.init_datepickers(),
          m.bindBulkOptionActions(),
          m.bindUIActionsFields(),
          "field-options" === c.tab &&
            p(".mhk-panel-field-options-button").trigger("click"),
          p(document.body).on(
            "muhiku-plug-field-drop",
            ".mhk-registered-buttons .mhk-registered-item",
            function () {
              m.fieldDrop(p(this).clone());
            }
          );
      },
      bindBulkOptionActions: function () {
        p(document.body).on("click", ".mhk-toggle-bulk-options", function (e) {
          p(this)
            .closest(".muhiku-plug-field-option")
            .find(".muhiku-plug-field-option-row-add_bulk_options")
            .slideToggle();
        }),
          p(document.body).on(
            "click",
            ".mhk-toggle-presets-list",
            function (e) {
              p(this)
                .closest(".muhiku-plug-field-option")
                .find(".muhiku-plug-field-option-row .mhk-options-presets")
                .slideToggle();
            }
          ),
          p(document.body).on("click", ".mhk-add-bulk-options", function (e) {
            var t,
              i = p(this).closest(".muhiku-plug-field-option-row"),
              o = i.data("field-id");
            i.length &&
              ((t = i
                .closest(".muhiku-plug-field-option")
                .find(
                  ".muhiku-plug-field-option-row-choices .mhk-choices-list"
                )),
              (o = (i = i.find(
                "textarea#muhiku-plug-field-option-" + o + "-add_bulk_options"
              ))
                .val()
                .split("\n")),
              m.addBulkOptions(o, t),
              i.val(""));
          }),
          p(document.body).on(
            "click",
            ".mhk-options-preset-label",
            function (e) {
              var t,
                i = p(this).closest(".muhiku-plug-field-option-row"),
                o = i.data("field-id");
              i.length &&
                ((t = p(this)
                  .closest(".mhk-options-preset")
                  .find(".mhk-options-preset-value")
                  .val()),
                i
                  .find(
                    "textarea#muhiku-plug-field-option-" +
                      o +
                      "-add_bulk_options"
                  )
                  .val(t),
                p(this).closest(".mhk-options-presets").slideUp());
            }
          ),
          p(document.body).on(
            "click",
            ".muhiku-plug-field-option-row-password_strength",
            function () {
              p(this).find('[type="checkbox"]:first').prop("checked") &&
                p(this)
                  .next()
                  .find('[type="checkbox"]:first')
                  .prop("checked", !1);
            }
          ),
          p(document.body).on(
            "click",
            ".muhiku-plug-field-option-row-password_validation",
            function () {
              p(this).find('[type="checkbox"]:first').prop("checked") &&
                (p(this)
                  .prev()
                  .find('[type="checkbox"]:first')
                  .prop("checked", !1),
                p(this)
                  .prev()
                  .find(".muhiku-plug-inner-options")
                  .addClass("muhiku-plug-hidden"));
            }
          );
      },
      addBulkOptions: function (e, i) {
        e.forEach(function (e) {
          var t;
          "" !== e &&
            ((t = i.find("li").last().find("a.add")),
            m.choiceAdd(null, t, e.trim()));
        });
      },
      init_datepickers: function () {
        var e = p(".muhiku-plug-disable-dates").data("date-format");
        p(".muhiku-plug-disable-dates").each(function () {
          p(this).get(0)._flatpickr ||
            p(this).flatpickr({ dateFormat: e, mode: "multiple" });
        }),
          p(document.body).on("change", ".mhk-date-format", function (e) {
            var t = p(
                ".muhiku-plug-field-option:visible .muhiku-plug-disable-dates"
              ),
              i = t.get(0)._flatpickr,
              o = i.selectedDates,
              n = p(this).val(),
              s = [];
            o.forEach(function (e) {
              s.push(flatpickr.formatDate(e, n));
            }),
              i.set("dateFormat", n),
              t.val(s.join(", "));
          }),
          p(document.body).on(
            "click",
            ".mhk-clear-disabled-dates",
            function () {
              p(".muhiku-plug-field-option:visible .muhiku-plug-disable-dates")
                .get(0)
                ._flatpickr.clear();
            }
          ),
          p(".muhiku-plug-field-date-time").each(function () {
            var e = p(this).attr("data-field-id");
            m.dateSettingToggler(
              e,
              p("#muhiku-plug-field-option-" + e + "-datetime_style").val()
            );
          });
      },
      bindEditActions: function () {
        p("#edit-form-name").on("click", function (e) {
          e.stopPropagation(),
            "" !== p("#mhk-edit-form-name").val().trim() &&
              m.toggleEditTitle(e);
        }),
          p("#mhk-edit-form-name")
            .on("change keypress", function (e) {
              var t = p(this);
              e.stopPropagation(),
                13 === e.which &&
                  "" !== p(this).val().trim() &&
                  m.toggleEditTitle(e),
                "" !== t.val().trim() &&
                  p("#muhiku-plug-panel-field-settings-form_title").val(
                    t.val().trim()
                  );
            })
            .on("click", function (e) {
              e.stopPropagation();
            }),
          p(document)
            .not(p(".muhiku-plug-title-desc"))
            .on("click", function (e) {
              var t = p("#mhk-edit-form-name");
              e.stopPropagation(),
                !t.prop("disabled") &&
                  t.val() &&
                  "" !== t.val().trim() &&
                  m.toggleEditTitle(e);
            });
      },
      toggleEditTitle: function (e) {
        var t = p("#edit-form-name").siblings("#mhk-edit-form-name");
        e.preventDefault(),
          t.prop("disabled", function (e, t) {
            return !t;
          }),
          t.hasClass("everst-forms-name-editing") || t.focus(),
          t.toggleClass("everst-forms-name-editing");
      },
      formObject: function (e) {
        for (
          var t = jQuery(e).find("[name]"), i = {}, o = {}, n = 0;
          n < t.length;
          n++
        ) {
          var s = jQuery(t[n]),
            r = s.prop("name").replace(/\]/gi, "").split("["),
            a = s.val(),
            d = {};
          if ((!s.is(":radio") && !s.is(":checkbox")) || s.is(":checked")) {
            for (var l = r.length - 1; 0 <= l; l--) {
              var f = r[l];
              if (
                (0 === (f = void 0 === f ? "" : f).length &&
                  ((d = []),
                  "undefined" == typeof o[r[l - 1]]
                    ? (o[r[l - 1]] = 0)
                    : (o[r[l - 1]] += 1),
                  (f = o[r[l - 1]])),
                l === r.length - 1)
              ) {
                if (a)
                  if ("true" === a) a = !0;
                  else if ("false" === a) a = !1;
                  else if (
                    isNaN(parseFloat(a)) ||
                    parseFloat(a).toString() !== a
                  )
                    if (
                      "string" != typeof a ||
                      ("{" !== a.substr(0, 1) && "[" !== a.substr(0, 1))
                    ) {
                      if ("object" == typeof a && a.length && s.is("select")) {
                        for (var c = {}, l = 0; l < a.length; l++)
                          c["n" + l] = a[l];
                        a = c;
                      }
                    } else
                      try {
                        a = JSON.parse(a);
                      } catch (v) {}
                  else a = parseFloat(a);
                d[f] = a;
              } else {
                var m = d;
                (d = {})[f] = m;
              }
            }
            p.extend(!0, i, d);
          }
        }
        return i;
      },
      bindUIActionsFields: function () {
        a.on(
          "click",
          ".muhiku-plug-field-option-row-choices .add",
          function (e) {
            m.choiceAdd(e, p(this));
          }
        ),
          a.on(
            "click",
            ".muhiku-plug-field-option-row-choices .remove",
            function (e) {
              m.choiceDelete(e, p(this));
            }
          ),
          a.on(
            "mousedown",
            ".muhiku-plug-field-option-row-choices input[type=radio]",
            function () {
              var e = p(this);
              e.is(":checked")
                ? e.attr("data-checked", "1")
                : e.attr("data-checked", "0");
            }
          ),
          a.on(
            "click",
            ".muhiku-plug-field-option-row-choices input[type=radio]",
            function () {
              var e = p(this),
                t = e.parent().parent();
              e
                .parent()
                .parent()
                .find("input[type=radio]")
                .not(this)
                .prop("checked", !1),
                "1" === e.attr("data-checked") &&
                  (e.prop("checked", !1), e.attr("data-checked", "0")),
                m.choiceUpdate(t.data("field-type"), t.data("field-id"));
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-choices input[type=checkbox]",
            function (e) {
              var t = p(this).parent().parent();
              m.choiceUpdate(t.data("field-type"), t.data("field-id"));
            }
          ),
          a.on(
            "keyup paste focusout",
            ".muhiku-plug-field-option-row-choices input.label, .muhiku-plug-field-option-row-choices input.value",
            function (e) {
              var t = p(this).parent().parent().parent();
              m.choiceUpdate(t.data("field-type"), t.data("field-id"));
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-show_values input",
            function (e) {
              p(this)
                .closest(".muhiku-plug-field-option")
                .find(".muhiku-plug-field-option-row-choices ul")
                .toggleClass("show-values");
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-choices_images input",
            function () {
              var e = p(this),
                t = e.parent().data("field-id"),
                i = p("#muhiku-plug-field-option-" + t),
                o = p("#muhiku-plug-field-option-" + t + "-input_columns"),
                n = p("#muhiku-plug-field-option-" + t)
                  .find(".muhiku-plug-field-option-hidden-type")
                  .val();
              e.parent().find(".notice").toggleClass("hidden"),
                i
                  .find(".muhiku-plug-field-option-row-choices ul")
                  .toggleClass("show-images"),
                (e.is(":checked") ? o.val("inline") : o.val("")).trigger(
                  "change"
                ),
                m.choiceUpdate(n, t);
            }
          ),
          a.on(
            "click",
            ".muhiku-plug-attachment-media-view .upload-button",
            function (e) {
              var t,
                i,
                o = p(this);
              e.preventDefault(),
                i ||
                  (i = wp.media.frames.everestforms_media_frame =
                    wp.media({
                      title: c.i18n_upload_image_title,
                      className: "media-frame muhiku-plug-media-frame",
                      frame: "select",
                      multiple: !1,
                      library: { type: "image" },
                      button: { text: c.i18n_upload_image_button },
                    })).on("select", function () {
                    var e = i.state().get("selection").first().toJSON();
                    (t = o.hasClass("button-add-media")
                      ? (o.hide(), o.parent())
                      : o.parent().parent().parent())
                      .find(".source")
                      .val(e.url),
                      t.find(".attachment-thumb").remove(),
                      t
                        .find(".thumbnail-image")
                        .prepend(
                          '<img class="attachment-thumb" src="' + e.url + '">'
                        ),
                      t.find(".actions").show(),
                      a.trigger("everestFormsImageUploadAdd", [o, t]);
                  }),
                i.open();
            }
          ),
          a.on(
            "click",
            ".muhiku-plug-attachment-media-view .remove-button",
            function (e) {
              e.preventDefault();
              e = p(this).parent().parent();
              e.find(".attachment-thumb").remove(),
                e.parent().find(".source").val(""),
                e.parent().find(".button-add-media").show(),
                a.trigger("everestFormsImageUploadRemove", [p(this), e]);
            }
          ),
          a.on(
            "everestFormsImageUploadAdd everestFormsImageUploadRemove",
            function (e, t, i) {
              var o = i.closest(".mhk-choices-list"),
                i = o.data("field-type"),
                o = o.data("field-id");
              m.choiceUpdate(i, o);
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-input_columns select",
            function () {
              var e = p(this),
                t = e.val(),
                i = e.parent().data("field-id"),
                e = "";
              "inline" === t
                ? (e = "muhiku-plug-list-inline")
                : "" !== t && (e = "muhiku-plug-list-" + t + "-columns"),
                p("#muhiku-plug-field-" + i)
                  .removeClass(
                    "muhiku-plug-list-inline muhiku-plug-list-2-columns muhiku-plug-list-3-columns"
                  )
                  .addClass(e);
            }
          ),
          a.on("click", ".muhiku-plug-fields-tab a", function (e) {
            e.preventDefault(), m.fieldTabChoice(p(this).attr("id"));
          }),
          p(document).on(
            "mouseenter",
            '.muhiku-plug-tabs li[class*="part_"]',
            function () {
              !1 === p(this).hasClass("active") &&
                (p(document)
                  .find(".muhiku-plug-field")
                  .hasClass("ui-sortable-helper") ||
                  p(document)
                    .find(".mhk-registered-buttons button.mhk-registered-item")
                    .hasClass("field-dragged")) &&
                p(this).find("a").trigger("click");
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-address input.hide",
            function () {
              var e = p(this),
                t = e.parent().parent().data("field-id"),
                e = e.parent().parent().data("subfield");
              p("#muhiku-plug-field-" + t)
                .find(".muhiku-plug-" + e)
                .toggleClass("hidden");
            }
          ),
          a.on(
            "input",
            ".muhiku-plug-field-option-row-label input",
            function () {
              var e = p(this),
                t = e.val(),
                e = e.parent().data("field-id");
              ($label = p("#muhiku-plug-field-" + e).find(
                ".label-title .text"
              )),
                $label.hasClass("nl2br")
                  ? $label.html(t.replace(/\n/g, "<br>"))
                  : $label.html(t);
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-enable_prepopulate input",
            function (e) {
              var t = p(this).parent().data("field-id");
              p("#muhiku-plug-field-" + t).toggleClass("parameter_name"),
                p(e.target).is(":checked")
                  ? p(
                      "#muhiku-plug-field-option-row-" + t + "-parameter_name"
                    ).show()
                  : p(
                      "#muhiku-plug-field-option-row-" + t + "-parameter_name"
                    ).hide();
            }
          ),
          a.on(
            "input",
            ".muhiku-plug-field-option-row-description textarea",
            function () {
              var e = p(this),
                t = e.val(),
                e = e.parent().data("field-id"),
                e = p("#muhiku-plug-field-" + e).find(".description");
              e.hasClass("nl2br")
                ? e.html(t.replace(/\n/g, "<br>"))
                : e.html(t);
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-required input",
            function (e) {
              var t = p(this).parent().data("field-id");
              p("#muhiku-plug-field-" + t).toggleClass("required"),
                p(e.target).is(":checked")
                  ? p(
                      "#muhiku-plug-field-option-row-" +
                        t +
                        "-required-field-message"
                    ).show()
                  : p(
                      "#muhiku-plug-field-option-row-" +
                        t +
                        "-required-field-message"
                    ).hide();
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-confirmation input",
            function (e) {
              var t = p(this).parent().data("field-id");
              p(e.target).is(":checked")
                ? (p("#muhiku-plug-field-" + t)
                    .find(".muhiku-plug-confirm")
                    .removeClass("muhiku-plug-confirm-disabled")
                    .addClass("muhiku-plug-confirm-enabled"),
                  p("#muhiku-plug-field-option-" + t)
                    .removeClass("muhiku-plug-confirm-disabled")
                    .addClass("muhiku-plug-confirm-enabled"))
                : (p("#muhiku-plug-field-" + t)
                    .find(".muhiku-plug-confirm")
                    .removeClass("muhiku-plug-confirm-enabled")
                    .addClass("muhiku-plug-confirm-disabled"),
                  p("#muhiku-plug-field-option-" + t)
                    .removeClass("muhiku-plug-confirm-enabled")
                    .addClass("muhiku-plug-confirm-disabled"));
            }
          ),
          a.on(
            "input",
            ".muhiku-plug-field-option-row-placeholder input",
            function (e) {
              var t = p(this),
                i = t.val(),
                t = t.parent().data("field-id"),
                t = p("#muhiku-plug-field-" + t).find(
                  ".widefat:not(.secondary-input)"
                );
              t.is("select")
                ? i.length
                  ? (t.find(".placeholder").length
                      ? t.find(".placeholder").text(i)
                      : t.prepend(
                          '<option class="placeholder" selected>' +
                            i +
                            "</option>"
                        ),
                    t.data("placeholder", i),
                    t.hasClass("enhanced") &&
                      t
                        .parent()
                        .find(".select2-search__field")
                        .prop("placeholder", i))
                  : t.find(".placeholder").remove()
                : t.attr("placeholder", i);
            }
          ),
          a.on(
            "input",
            ".muhiku-plug-field-option-address input.placeholder",
            function (e) {
              var t = p(this),
                i = t.val(),
                o = t.parent().parent().data("field-id"),
                t = t.parent().parent().data("subfield");
              p("#muhiku-plug-field-" + o)
                .find(".muhiku-plug-" + t + " input")
                .attr("placeholder", i);
            }
          ),
          a.on(
            "input",
            ".muhiku-plug-field-option-row-confirmation_placeholder input",
            function () {
              var e = p(this),
                t = e.val(),
                e = e.parent().data("field-id");
              p("#muhiku-plug-field-" + e)
                .find(".secondary-input")
                .attr("placeholder", t);
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-label_hide input",
            function () {
              var e = p(this).parent().data("field-id");
              p("#muhiku-plug-field-" + e).toggleClass("label_hide");
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-sublabel_hide input",
            function () {
              var e = p(this).parent().data("field-id");
              p("#muhiku-plug-field-" + e).toggleClass("sublabel_hide");
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-datetime_format select, .muhiku-plug-field-option-row-phone_format select, .muhiku-plug-field-option-row-item_price select, .muhiku-plug-field-option-row-format select",
            function (e) {
              var t = p(this),
                i = t.val(),
                t = t.parent().data("field-id");
              p("#muhiku-plug-field-" + t)
                .find(".format-selected")
                .removeClass()
                .addClass("format-selected format-selected-" + i),
                p("#muhiku-plug-field-option-" + t)
                  .find(".format-selected")
                  .removeClass()
                  .addClass("format-selected format-selected-" + i);
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-datetime_style select",
            function () {
              m.dateSettingToggler(
                p(this).parent().attr("data-field-id"),
                p(this).val()
              );
            }
          ),
          p(
            ".muhiku-plug-field-option-row-time_interval_format [id*=enable_min_max_time]"
          ).each(function () {
            p(this).prop("checked")
              ? (p(this)
                  .parent()
                  .parent()
                  .find(".input-group-col-2")
                  .has(" [id*=min_time_hour]")
                  .show(),
                p(this)
                  .parent()
                  .parent()
                  .find(".input-group-col-2")
                  .has(" [id*=max_time_hour]")
                  .show(),
                p(this)
                  .parent()
                  .parent()
                  .find(".input-group-col-2")
                  .has(" [for*=select_min_time]")
                  .show(),
                p(this)
                  .parent()
                  .parent()
                  .find(".input-group-col-2")
                  .has("[for*=select_max_time]")
                  .show())
              : (p(this)
                  .parent()
                  .parent()
                  .find(".input-group-col-2")
                  .has("[id*=min_time_hour]")
                  .hide(),
                p(this)
                  .parent()
                  .parent()
                  .find(".input-group-col-2")
                  .has("[id*=max_time_hour]")
                  .hide(),
                p(this).parent().parent().find("[for*=select_min_time]").hide(),
                p(this)
                  .parent()
                  .parent()
                  .find("[for*=select_max_time]")
                  .hide());
          }),
          a.on(
            "click",
            ".muhiku-plug-field-option-row-time_interval_format [id*=enable_min_max_time]",
            function () {
              p(this).prop("checked")
                ? (p(this)
                    .parent()
                    .parent()
                    .find(".input-group-col-2")
                    .has(" [id*=min_time_hour]")
                    .show(),
                  p(this)
                    .parent()
                    .parent()
                    .find(".input-group-col-2")
                    .has(" [id*=max_time_hour]")
                    .show(),
                  p(this)
                    .parent()
                    .parent()
                    .find("[for*=select_min_time]")
                    .show(),
                  p(this)
                    .parent()
                    .parent()
                    .find("[for*=select_max_time]")
                    .show())
                : (p(this)
                    .parent()
                    .parent()
                    .find(".input-group-col-2")
                    .has("[id*=min_time_hour]")
                    .hide(),
                  p(this)
                    .parent()
                    .parent()
                    .find(".input-group-col-2")
                    .has("[id*=max_time_hour]")
                    .hide(),
                  p(this)
                    .parent()
                    .parent()
                    .find("[for*=select_min_time]")
                    .hide(),
                  p(this)
                    .parent()
                    .parent()
                    .find("[for*=select_max_time]")
                    .hide());
            }
          ),
          a.on(
            "change",
            ".muhiku-plug-field-option-row-time_interval_format select[id*=time_format]",
            function () {
              (min_hour = p(this)
                .parent()
                .siblings(".input-group-col-2")
                .find("[id*=min_time_hour]")),
                (max_hour = p(this)
                  .parent()
                  .siblings(".input-group-col-2")
                  .find("[id*=max_time_hour]"));
              var e,
                t,
                o = min_hour.find("option:selected").val(),
                n = max_hour.find("option:selected").val(),
                s = "";
              for (i = 0; i <= 23; i++)
                "H:i" === p(this).val()
                  ? (s +=
                      '<option value = "' +
                      i +
                      '">' +
                      (i < 10 ? "0" + i : i) +
                      "</option>")
                  : ((e = " PM"),
                    0 == (t = i < 12 ? ((e = " AM"), i) : i - 12) && (t = 12),
                    (s +=
                      '<option value = "' + i + '">' + t + e + "</option>"));
              min_hour.html(s),
                max_hour.html(s),
                min_hour.find("option[value=" + o + "]").prop("selected", !0),
                max_hour.find("option[value=" + n + "]").prop("selected", !0);
            }
          );
      },
      dateSettingToggler: function (e, t) {
        "picker" == t
          ? (p("#muhiku-plug-field-option-row-" + e + "-placeholder").show(),
            p("#muhiku-plug-field-option-" + e + "-disable_dates").show(),
            p(
              "label[for=muhiku-plug-field-option-" + e + "-disable_dates]"
            ).show(),
            p("#muhiku-plug-field-option-" + e + "-date_mode-range")
              .parents()
              .find("muhiku-plug-checklist")
              .show(),
            p(
              ".muhiku-plug-field-option-row-date_format .time_interval"
            ).show(),
            p("#muhiku-plug-field-option-" + e + "-date_localization").show(),
            p(
              "label[for=muhiku-plug-field-option-" + e + "-date_localization]"
            ).show(),
            p("#muhiku-plug-field-option-" + e + "-date_default")
              .parent()
              .show(),
            p("#muhiku-plug-field-option-" + e + "-enable_min_max")
              .parent()
              .show(),
            p("#muhiku-plug-field-option-" + e + "-enable_min_max").prop(
              "checked"
            ) &&
              p(
                "#muhiku-plug-field-option-row-" +
                  e +
                  "-date_format .muhiku-plug-min-max-date-option"
              ).removeClass("muhiku-plug-hidden"),
            p("#muhiku-plug-field-option-" + e + "-time_interval").show(),
            p("#muhiku-plug-field-option-" + e + "-enable_min_max_time").hide(),
            p(
              "label[for=muhiku-plug-field-option-" +
                e +
                "-enable_min_max_time]"
            ).hide(),
            p(
              "label[for=muhiku-plug-field-option-" + e + "-select_min_time]"
            ).hide(),
            p(
              "label[for=muhiku-plug-field-option-" + e + "-select_max_time]"
            ).hide(),
            p("#muhiku-plug-field-option-" + e + "-min_time_hour")
              .parent()
              .hide(),
            p("#muhiku-plug-field-option-" + e + "-max_time_hour")
              .parent()
              .hide())
          : (p("#muhiku-plug-field-option-" + e + "-date_mode-range")
              .parents()
              .find("muhiku-plug-checklist")
              .hide(),
            p("#muhiku-plug-field-option-" + e + "-date_default")
              .parent()
              .hide(),
            p("#muhiku-plug-field-option-row-" + e + "-placeholder").hide(),
            p("#muhiku-plug-field-option-" + e + "-enable_min_max")
              .parent()
              .hide(),
            p(
              "#muhiku-plug-field-option-row-" +
                e +
                "-date_format .muhiku-plug-min-max-date-option"
            ).addClass("muhiku-plug-hidden"),
            p("#muhiku-plug-field-option-" + e + "-disable_dates").hide(),
            p(
              "label[for=muhiku-plug-field-option-" + e + "-disable_dates]"
            ).hide(),
            p(
              ".muhiku-plug-field-option-row-date_format .muhiku-plug-checklist"
            ).hide(),
            p(
              ".muhiku-plug-field-option-row-date_format .time_interval"
            ).hide(),
            p("#muhiku-plug-field-option-" + e + "-date_localization").hide(),
            p(
              "label[for=muhiku-plug-field-option-" + e + "-date_localization]"
            ).hide(),
            p("#muhiku-plug-field-option-" + e + "-time_interval").hide(),
            p("#muhiku-plug-field-option-" + e + "-enable_min_max_time").show(),
            p(
              "label[for=muhiku-plug-field-option-" +
                e +
                "-enable_min_max_time]"
            ).show(),
            p("#muhiku-plug-field-option-" + e + "-enable_min_max_time").prop(
              "checked"
            ) &&
              (p(
                "label[for=muhiku-plug-field-option-" + e + "-select_min_time]"
              ).show(),
              p(
                "label[for=muhiku-plug-field-option-" + e + "-select_max_time]"
              ).show(),
              p("#muhiku-plug-field-option-" + e + "-min_time_hour")
                .parent()
                .show(),
              p("#muhiku-plug-field-option-" + e + "-max_time_hour")
                .parent()
                .show()));
      },
      choicesInit: function (e) {
        p((e = e || ".muhiku-plug-field-option-row-choices ul")).sortable({
          items: "li",
          axis: "y",
          handle: ".sort",
          scrollSensitivity: 40,
          stop: function (e) {
            var t = p(e.target).attr("data-field-id"),
              e = p("#muhiku-plug-field-option-" + t)
                .find(".muhiku-plug-field-option-hidden-type")
                .val();
            m.choiceUpdate(e, t);
          },
        });
      },
      choiceAdd: function (e, t, i) {
        e && e.preventDefault && e.preventDefault();
        var o = p(t),
          n = o.parent(),
          s = n.find("input.default").is(":checked"),
          r = o
            .closest(".muhiku-plug-field-option-row-choices")
            .data("field-id"),
          e = n.parent().attr("data-next-id"),
          t = n.parent().data("field-type"),
          o = n.clone().insertAfter(n);
        o.attr("data-key", e),
          o
            .find("input.label")
            .val(i)
            .attr("name", "form_fields[" + r + "][choices][" + e + "][label]"),
          o
            .find("input.value")
            .val(i)
            .attr("name", "form_fields[" + r + "][choices][" + e + "][value]"),
          o
            .find("input.source")
            .val("")
            .attr("name", "form_fields[" + r + "][choices][" + e + "][image]"),
          o
            .find("input.default")
            .attr("name", "form_fields[" + r + "][choices][" + e + "][default]")
            .prop("checked", !1),
          o.find(".attachment-thumb").remove(),
          o.find(".button-add-media").show(),
          !0 === s && n.find("input.default").prop("checked", !0),
          e++,
          n.parent().attr("data-next-id", e),
          a.trigger("everestFormsChoiceAdd"),
          m.choiceUpdate(t, r);
      },
      choiceDelete: function (e, t) {
        e.preventDefault();
        (e = p(t)), (t = e.parent().parent());
        t.find("li").length < 2
          ? p.alert({
              title: !1,
              content: c.i18n_field_error_choice,
              icon: "dashicons dashicons-info",
              type: "blue",
              buttons: {
                ok: {
                  text: c.i18n_ok,
                  btnClass: "btn-confirm",
                  keys: ["enter"],
                },
              },
            })
          : (e.parent().remove(),
            m.choiceUpdate(t.data("field-type"), t.data("field-id")),
            a.trigger("everestFormsChoiceDelete"));
      },
      choiceUpdate: function (n, s) {
        var r,
          e = p("#muhiku-plug-field-option-" + s);
        if (
          (($primary = p("#muhiku-plug-field-" + s + " .primary-input")),
          "radio" === n ||
            "checkbox" === n ||
            "payment-multiple" === n ||
            "payment-checkbox" === n)
        ) {
          var t = [],
            i = m.formObject(e).form_fields[s];
          p("#muhiku-plug-field-option-" + s)
            .find(".mhk-choices-list li")
            .each(function () {
              t.push(p(this).data("key"));
            });
          e = wp.template("muhiku-plug-field-preview-choices");
          return (
            (data = {
              type: (n =
                "checkbox" === n || "payment-checkbox" === n
                  ? "checkbox"
                  : "radio"),
              order: t,
              settings: i,
              amountFilter: m.amountFilter,
            }),
            void p("#muhiku-plug-field-" + s)
              .find("ul.primary-input")
              .replaceWith(e(data))
          );
        }
        "select" === n &&
          ((r = "<option>{label}</option>"),
          $primary.find("option").not(".placeholder").remove()),
          p(
            "#muhiku-plug-field-option-row-" +
              s +
              "-choices .mhk-choices-list li"
          ).each(function (e) {
            var t = p(this),
              i = t.find("input.label").val(),
              t = t.find("input.default").is(":checked"),
              o = p(r.replace("{label}", i));
            if (
              (p("#muhiku-plug-field-" + s + " .primary-input").append(o),
              i && !0 === t)
            )
              switch (n) {
                case "select":
                  o.prop("selected", !0);
                  break;
                case "radio":
                case "checkbox":
                  o.find("input").prop("checked", !0);
              }
          });
      },
      amountFilter: function (e, t) {
        return "right" === e.currency_symbol_pos
          ? t + " " + e.currency_symbol
          : e.currency_symbol + " " + t;
      },
      bindFormSettings: function () {
        p("body").on("click", ".mhk-setting-panel", function (e) {
          var t = p(this).attr("data-section");
          p(".mhk-setting-panel").removeClass("active"),
            p(".muhiku-plug-active-email").removeClass("active"),
            p(".mhk-content-section").removeClass("active"),
            p(this).addClass("active"),
            p(".mhk-content-" + t + "-settings").addClass("active"),
            e.preventDefault();
        }),
          p(".mhk-setting-panel").eq(0).trigger("click");
      },
      bindFormEmail: function () {
        p("body").on(
          "click",
          ".muhiku-plug-panel-sidebar-section-email",
          function (e) {
            p(this).siblings(".muhiku-plug-active-email").removeClass("active"),
              p(this).next(".muhiku-plug-active-email").addClass("active");
            var t = p(this)
              .siblings(".muhiku-plug-active-email.active")
              .find(".muhiku-plug-active-email-connections-list li");
            t.length && t.children(".user-nickname").first().trigger("click"),
              e.preventDefault();
          }
        );
      },
      bindFormIntegrations: function () {
        p("body").on("click", ".mhk-integrations-panel", function (e) {
          var t = p(this).attr("data-section");
          p(".mhk-integrations-panel").removeClass("active"),
            p("#muhiku-plug-panel-integrations")
              .find(".mhk-panel-content-section")
              .removeClass("active"),
            p(this).addClass("active"),
            p(this)
              .parent()
              .find(".muhiku-plug-active-connections")
              .removeClass("active"),
            p(this).next(".muhiku-plug-active-connections").addClass("active");
          var i = p(this)
            .siblings(".muhiku-plug-active-connections.active")
            .find(".muhiku-plug-active-connections-list li");
          i.length && i.children(".user-nickname").first().trigger("click"),
            p(".mhk-panel-content-section-" + t).addClass("active"),
            e.preventDefault();
        }),
          p(".mhk-setting-panel").eq(0).trigger("click");
      },
      bindFormPayment: function () {
        p("body").on("click", ".mhk-payments-panel", function (e) {
          var t = p(this).attr("data-section");
          p(".mhk-payments-panel").removeClass("active"),
            p(this).siblings().removeClass("icon active"),
            p(this).addClass("active"),
            p(this)
              .parents("#muhiku-plug-panel-payments")
              .find(".mhk-payment-setting-content")
              .removeClass("active")
              .hide(),
            p(".mhk-content-" + t + "-settings")
              .addClass("active")
              .show(),
            e.preventDefault();
        }),
          p(".mhk-setting-panel").eq(0).trigger("click");
      },
      removeRow: function (e) {
        p.each(e.find(".muhiku-plug-field"), function () {
          var e = p(this).attr("data-field-id"),
            e = p("#muhiku-plug-field-option-" + e);
          p(this).remove(), e.remove();
        }),
          e.remove();
      },
      bindRemoveRow: function () {
        p("body").on("click", ".mhk-delete-row", function () {
          var e = p(this),
            t = p(".mhk-admin-row").length,
            i = e.closest(".mhk-admin-row"),
            o = e
              .parents(".mhk-admin-field-container")
              .attr("data-current-part"),
            e = p("#muhiku-plug-builder").hasClass("multi-part-activated");
          (t = o && e ? p("#part_" + o).find(".mhk-admin-row").length : t) < 2
            ? p.alert({
                title: c.i18n_row_locked,
                content: c.i18n_row_locked_msg,
                icon: "dashicons dashicons-info",
                type: "blue",
                buttons: {
                  confirm: {
                    text: c.i18n_close,
                    btnClass: "btn-confirm",
                    keys: ["enter"],
                  },
                },
              })
            : p.confirm({
                title: !1,
                content: c.i18n_delete_row_confirm,
                type: "red",
                closeIcon: !1,
                backgroundDismiss: !1,
                icon: "dashicons dashicons-warning",
                buttons: {
                  confirm: {
                    text: c.i18n_ok,
                    btnClass: "btn-confirm",
                    keys: ["enter"],
                    action: function () {
                      m.removeRow(i),
                        p(".muhiku-plug-fields-tab")
                          .find("a")
                          .removeClass("active"),
                        p(".muhiku-plug-fields-tab")
                          .find("a")
                          .first()
                          .addClass("active"),
                        p(".muhiku-plug-add-fields").show();
                    },
                  },
                  cancel: { text: c.i18n_cancel },
                },
              });
        });
      },
      bindAddNewRow: function () {
        p("body").on("click", ".mhk-add-row span", function () {
          var e = p(this),
            t = p(".mhk-admin-field-wrapper"),
            i = p(".mhk-admin-row")
              .map(function () {
                return p(this).data("row-id");
              })
              .get(),
            o = Math.max.apply(Math, i),
            n = p(".mhk-admin-row").eq(0).clone(),
            s = e.parent().attr("data-total-rows"),
            i = e
              .parents(".mhk-admin-field-container")
              .attr("data-current-part");
          o++,
            s++,
            i && (t = p(".mhk-admin-field-wrapper").find("#part_" + i)),
            n.find(".mhk-admin-grid").html(""),
            n.attr("data-row-id", o),
            e.parent().attr("data-total-rows", s),
            e.parent().attr("data-next-row-id", o),
            t.append(n),
            m.bindFields(),
            m.checkEmptyGrid(),
            e.trigger("muhiku-plug-after-add-row", n);
        });
      },
      bindCloneField: function () {
        p("body").on(
          "click",
          ".muhiku-plug-preview .muhiku-plug-field .muhiku-plug-field-duplicate",
          function () {
            var e = p(this).closest(".muhiku-plug-field");
            e.hasClass("no-duplicate")
              ? p.alert({
                  title: c.i18n_field_locked,
                  content: c.i18n_field_locked_msg,
                  icon: "dashicons dashicons-info",
                  type: "blue",
                  buttons: {
                    confirm: {
                      text: c.i18n_close,
                      btnClass: "btn-confirm",
                      keys: ["enter"],
                    },
                  },
                })
              : p.confirm({
                  title: !1,
                  content: c.i18n_duplicate_field_confirm,
                  type: "orange",
                  closeIcon: !1,
                  backgroundDismiss: !1,
                  icon: "dashicons dashicons-warning",
                  buttons: {
                    confirm: {
                      text: c.i18n_ok,
                      btnClass: "btn-confirm",
                      keys: ["enter"],
                      action: function () {
                        m.cloneFieldAction(e);
                      },
                    },
                    cancel: { text: c.i18n_cancel },
                  },
                });
          }
        ),
          p("body").on(
            "click",
            ".mhk-admin-row .mhk-duplicate-row",
            function () {
              var e = p(this).closest(".mhk-admin-row");
              e.find(".muhiku-plug-field").hasClass("no-duplicate")
                ? p.alert({
                    title: c.i18n_field_locked,
                    content: c.i18n_row_locked_msg,
                    icon: "dashicons dashicons-info",
                    type: "blue",
                    buttons: {
                      confirm: {
                        text: c.i18n_close,
                        btnClass: "btn-confirm",
                        keys: ["enter"],
                      },
                    },
                  })
                : p.confirm({
                    title: !1,
                    content: c.i18n_duplicate_row_confirm,
                    type: "orange",
                    closeIcon: !1,
                    backgroundDismiss: !1,
                    icon: "dashicons dashicons-warning",
                    buttons: {
                      confirm: {
                        text: c.i18n_ok,
                        btnClass: "btn-confirm",
                        keys: ["enter"],
                        action: function () {
                          m.cloneRowAction(e);
                        },
                      },
                      cancel: { text: c.i18n_cancel },
                    },
                  });
            }
          );
      },
      cloneRowAction: function (t) {
        (row_ids = p(".mhk-admin-row")
          .map(function () {
            return p(this).data("row-id");
          })
          .get()),
          (max_row_id = Math.max.apply(Math, row_ids)),
          (row_clone = t.clone()),
          (total_rows = p(".mhk-add-row").attr("data-total-rows")),
          max_row_id++,
          total_rows++,
          row_clone.attr("data-row-id", max_row_id),
          p(".mhk-add-row").attr("data-total-rows", total_rows),
          p(".mhk-add-row").attr("data-next-row-id", max_row_id);
        var e = {
          action: "everest_forms_get_next_id",
          security: c.mhk_get_next_id,
          form_id: c.form_id,
          fields: row_clone.find(".muhiku-plug-field").length,
        };
        p.ajax({
          url: c.ajax_url,
          data: e,
          type: "POST",
          beforeSend: function () {
            p(document.body).trigger("init_field_options_toggle");
          },
          success: function (e) {
            "boolean" == typeof e.success &&
              !0 === e.success &&
              (t.after(row_clone),
              p.each(e.data, function (e, t) {
                var i = t.field_id,
                  t = t.field_key;
                p("#muhiku-plug-field-id").val(i),
                  (field = row_clone.find(".muhiku-plug-field").eq(e));
                e = field.attr("data-field-id");
                m.render_node(field, e, t),
                  field.remove(),
                  p(document.body).trigger("init_field_options_toggle");
              }),
              m.bindFields());
          },
        });
      },
      cloneFieldAction: function (i) {
        var o = i.attr("data-field-id"),
          e = c.form_id,
          e = {
            action: "everest_forms_get_next_id",
            security: c.mhk_get_next_id,
            form_id: e,
          };
        p.ajax({
          url: c.ajax_url,
          data: e,
          type: "POST",
          beforeSend: function () {
            p(document.body).trigger("init_field_options_toggle");
          },
          success: function (e) {
            var t;
            "boolean" == typeof e.success &&
              !0 === e.success &&
              ((t = e.data.field_id),
              (e = e.data.field_key),
              p("#muhiku-plug-field-id").val(t),
              m.render_node(i, o, e),
              p(document.body).trigger("init_field_options_toggle"));
          },
        });
      },
      render_node: function (e, o, n) {
        var t = p(".muhiku-plug-field-options #muhiku-plug-field-option-" + o),
          i = p("#muhiku-plug-field-option-" + o + "-label").val(),
          s = p("#muhiku-plug-field-option-" + o + "-meta-key").length
            ? p("#muhiku-plug-field-option-" + o + "-meta-key").val()
            : "",
          r = e.attr("data-field-type"),
          a = t.html(),
          d = i + " " + c.i18n_copy,
          i =
            "html" !== r
              ? s
                  .replace(/\(|\)/g, "")
                  .toLowerCase()
                  .substring(0, s.lastIndexOf("_")) +
                "_" +
                Math.floor(1e3 + 9e3 * Math.random())
              : "",
          s = e.clone(),
          l = new RegExp(o, "g"),
          a = a.replace(l, n),
          f = p(
            '<div class="muhiku-plug-field-option muhiku-plug-field-option-' +
              r +
              '" id="muhiku-plug-field-option-' +
              n +
              '" data-field-id="' +
              n +
              '" />'
          );
        f.append(a),
          p.each(t.find(":input"), function () {
            var e,
              t = p(this).attr("type"),
              i = (p(this).attr("name") ? p(this).attr("name") : "").replace(
                l,
                n
              );
            "text" === t || "hidden" === t
              ? ((e = p(this).val()),
                f.find('input[name="' + i + '"]').val(e),
                f.find('input[value="' + o + '"]').val(n))
              : "checkbox" === t || "radio" === t
              ? p(this).is(":checked")
                ? f
                    .find('input[name="' + i + '"]')
                    .prop("checked", !0)
                    .attr("checked", "checked")
                : f
                    .find('[name="' + i + '"]')
                    .prop("checked", !1)
                    .attr("checked", !1)
              : p(this).is("select")
              ? p(this).find("option:selected").length &&
                ((t = p(this).find("option:selected").val()),
                f
                  .find('[name="' + i + '"]')
                  .find('[value="' + t + '"]')
                  .prop("selected", !0))
              : "" !== p(this).val() &&
                f.find('[name="' + i + '"]').val(p(this).val());
          }),
          p(".muhiku-plug-field-options").append(f),
          p("#muhiku-plug-field-option-" + n + "-label").val(d),
          p("#muhiku-plug-field-option-" + n + "-meta-key").val(i),
          s.attr("class", e.attr("class")),
          s.attr("id", "muhiku-plug-field-" + n),
          s.attr("data-field-id", n),
          s.attr("data-field-type", r),
          s.find(".label-title .text").text(d),
          e
            .closest(".mhk-admin-grid")
            .find('[data-field-id="' + o + '"]')
            .after(s),
          p(document).trigger("everest-form-cloned", [n, r]),
          m.switchToFieldOptionPanel(n),
          p(document.body).trigger("mhk_render_node_complete", [r, n, s, f]);
      },
      bindFieldDelete: function () {
        p("body").on(
          "click",
          ".muhiku-plug-preview .muhiku-plug-field .muhiku-plug-field-delete",
          function () {
            var t = p(this).closest(".muhiku-plug-field"),
              e = t.attr("data-field-id"),
              i = p("#muhiku-plug-field-option-" + e);
            p(this).closest(".mhk-admin-grid");
            t.hasClass("no-delete")
              ? p.alert({
                  title: c.i18n_field_locked,
                  content: c.i18n_field_locked_msg,
                  icon: "dashicons dashicons-info",
                  type: "blue",
                  buttons: {
                    confirm: {
                      text: c.i18n_close,
                      btnClass: "btn-confirm",
                      keys: ["enter"],
                    },
                  },
                })
              : p.confirm({
                  title: !1,
                  content: c.i18n_delete_field_confirm,
                  type: "red",
                  closeIcon: !1,
                  backgroundDismiss: !1,
                  icon: "dashicons dashicons-warning",
                  buttons: {
                    confirm: {
                      text: c.i18n_ok,
                      btnClass: "btn-confirm",
                      keys: ["enter"],
                      action: function () {
                        p(".mhk-panel-fields-button").trigger("click"),
                          t.fadeOut("slow", function () {
                            var e = t.attr("data-field-id");
                            p(document.body).trigger(
                              "mhk_before_field_deleted",
                              [e]
                            ),
                              t.remove(),
                              i.remove(),
                              m.checkEmptyGrid(),
                              p(".muhiku-plug-fields-tab")
                                .find("a")
                                .removeClass("active"),
                              p(".muhiku-plug-fields-tab")
                                .find("a")
                                .first()
                                .addClass("active"),
                              p(".muhiku-plug-add-fields").show(),
                              m.conditionalLogicRemoveField(e),
                              m.conditionalLogicRemoveFieldIntegration(e),
                              m.paymentFieldRemoveFromQuantity(e);
                          });
                      },
                    },
                    cancel: { text: c.i18n_cancel },
                  },
                });
          }
        );
      },
      bindFieldDeleteWithKeyEvent: function () {
        p("body").on("keyup", function (e) {
          var t,
            i = p(".muhiku-plug-preview .muhiku-plug-field.active");
          46 === e.which &&
            !0 === i.hasClass("active") &&
            !1 === i.hasClass("mhk-delete-event-active") &&
            0 != p(".mhk-admin-row").hasClass("mhk-hover") &&
            (i.addClass("mhk-delete-event-active"),
            (e = i.attr("data-field-id")),
            (t = p("#muhiku-plug-field-option-" + e)),
            i.hasClass("no-delete")
              ? p.alert({
                  title: c.i18n_field_locked,
                  content: c.i18n_field_locked_msg,
                  icon: "dashicons dashicons-info",
                  type: "blue",
                  buttons: {
                    confirm: {
                      text: c.i18n_close,
                      btnClass: "btn-confirm",
                      keys: ["enter"],
                      action: function () {
                        i.removeClass("mhk-delete-event-active");
                      },
                    },
                  },
                })
              : p.confirm({
                  title: !1,
                  content: c.i18n_delete_field_confirm,
                  type: "red",
                  closeIcon: !1,
                  backgroundDismiss: !1,
                  icon: "dashicons dashicons-warning",
                  buttons: {
                    confirm: {
                      text: c.i18n_ok,
                      btnClass: "btn-confirm",
                      keys: ["enter"],
                      action: function () {
                        p(".mhk-panel-fields-button").trigger("click"),
                          i.fadeOut("slow", function () {
                            var e = i.attr("data-field-id");
                            p(document.body).trigger(
                              "mhk_before_field_deleted",
                              [e]
                            ),
                              i.remove(),
                              t.remove(),
                              m.checkEmptyGrid(),
                              p(".muhiku-plug-fields-tab")
                                .find("a")
                                .removeClass("active"),
                              p(".muhiku-plug-fields-tab")
                                .find("a")
                                .first()
                                .addClass("active"),
                              p(".muhiku-plug-add-fields").show(),
                              m.conditionalLogicRemoveField(e),
                              m.conditionalLogicRemoveFieldIntegration(e),
                              m.paymentFieldRemoveFromQuantity(e);
                          }),
                          i.removeClass("mhk-delete-event-active");
                      },
                    },
                    cancel: {
                      text: c.i18n_cancel,
                      action: function () {
                        i.removeClass("mhk-delete-event-active");
                      },
                    },
                  },
                }));
        });
      },
      bindSaveOption: function () {
        p("body").on("click", ".muhiku-plug-save-button", function () {
          var t = p(this),
            e = p("form#muhiku-plug-builder-form"),
            i = m.getStructure(),
            o = e.serializeArray(),
            n = p("#mhk-edit-form-name").val().trim(),
            s = {};
          if (
            (p(".muhiku-plug-field-option-row")
              .find(".mhk-select2-multiple")
              .filter(function () {
                var e = p(this).attr("id"),
                  t = p(this).attr("name"),
                  i = p(this).parent().attr("id");
                return (
                  e.split("-option-")[1] === i.split("-option-row-")[1] &&
                    (s[e] = t),
                  s
                );
              }),
            0 < Object.keys(s).length &&
              p.each(s, function (e, t) {
                var i = [];
                p.each(p("#" + e + " option:selected"), function () {
                  i.push(p(this).val());
                }),
                  o.push({ name: t, value: i.toString() });
              }),
            "" !== n)
          ) {
            e.triggerHandler("everest_forms_process_ajax_data", [t, o]) &&
              (o = e.triggerHandler("everest_forms_process_ajax_data", [t, o])),
              p(".muhiku-plug-panel-content-wrap").block({
                message: null,
                overlayCSS: { background: "#fff", opacity: 0.6 },
              });
            var r = [];
            p(".muhiku-plug-field[data-field-id]").each(function () {
              r.push(p(this).attr("data-field-id"));
            });
            for (var a, d = o.length; d--; )
              o[d].name.startsWith("form_fields") &&
                ((a = !1),
                r.forEach(function (e) {
                  o[d].name.startsWith("form_fields[" + e + "]") && (a = !0);
                }),
                -1 < d && !1 === a && o.splice(d, 1));
            (i = o.concat(i)),
              (i = {
                action: "everest_forms_save_form",
                security: c.mhk_save_form,
                form_data: JSON.stringify(i),
              });
            p.ajax({
              url: c.ajax_url,
              data: i,
              type: "POST",
              beforeSend: function () {
                t.addClass("processing"),
                  t.find(".loading-dot").remove(),
                  t.append('<span class="loading-dot"></span>');
              },
              success: function (e) {
                t.removeClass("processing"),
                  t.find(".loading-dot").remove(),
                  e.success ||
                    p.alert({
                      title: e.data.errorTitle,
                      content: e.data.errorMessage,
                      icon: "dashicons dashicons-warning",
                      type: "red",
                      buttons: {
                        ok: {
                          text: c.i18n_ok,
                          btnClass: "btn-confirm",
                          keys: ["enter"],
                        },
                      },
                    }),
                  p(".muhiku-plug-panel-content-wrap").unblock();
              },
            });
          } else p.alert({ title: c.i18n_field_title_empty, content: c.i18n_field_title_payload, icon: "dashicons dashicons-warning", type: "red", buttons: { ok: { text: c.i18n_ok, btnClass: "btn-confirm", keys: ["enter"] } } });
        });
      },
      bindSaveOptionWithKeyEvent: function () {
        p("body").on("keydown", function (e) {
          (e.ctrlKey || e.metaKey) &&
            (("s" !== String.fromCharCode(e.which).toLowerCase() &&
              83 !== e.which) ||
              (e.preventDefault(),
              p(".muhiku-plug-save-button").trigger("click")));
        });
      },
      getStructure: function () {
        var e = p(".mhk-admin-field-wrapper"),
          s = [];
        return (
          p.each(e.find(".mhk-admin-row"), function () {
            var e = p(this),
              n = e.attr("data-row-id");
            p.each(e.find(".mhk-admin-grid"), function () {
              var e = p(this),
                i = e.attr("data-grid-id"),
                o = 0;
              p.each(e.find(".muhiku-plug-field"), function () {
                var e = { name: "", value: "" },
                  t = p(this).attr("data-field-id");
                (e.name =
                  "structure[row_" + n + "][grid_" + i + "][" + o + "]"),
                  o++,
                  (e.value = t),
                  s.push(e);
              }),
                e.find(".muhiku-plug-field").length < 1 &&
                  s.push({
                    name: "structure[row_" + n + "][grid_" + i + "]",
                    value: "",
                  });
            });
          }),
          s
        );
      },
      getFieldArray: function (e) {
        var t = [];
        return (
          p.each(e.find(".muhiku-plug-field"), function () {
            var e = p(this).attr("data-field-id");
            t.push(e);
          }),
          t
        );
      },
      checkEmptyGrid: function (e) {
        p.each(p(".mhk-admin-grid"), function () {
          p(this)
            .find(
              ".muhiku-plug-field, .mhk-registered-item:not(.ui-draggable-dragging)"
            )
            .not(".ui-sortable-helper").length < 1
            ? p(this).addClass("mhk-empty-grid")
            : p(this).removeClass("mhk-empty-grid");
        }),
          m.choicesInit();
      },
      bindDefaultTabs: function () {
        p(document).on("click", ".mhk-nav-tab-wrapper a", function (e) {
          e.preventDefault(), m.switchTab(p(this).data("panel"));
        });
      },
      switchTab: function (e) {
        var t = p("#muhiku-plug-panel-" + e),
          i = p(".mhk-panel-" + e + "-button");
        p(".mhk-nav-tab-wrapper").find("a").removeClass("nav-tab-active"),
          i.addClass("nav-tab-active"),
          t
            .closest(".mhk-tab-content")
            .find(".muhiku-plug-panel")
            .removeClass("active"),
          t.addClass("active"),
          ("integrations" !== e && "payments" !== e) ||
            (t.find(".muhiku-plug-panel-sidebar a").hasClass("active") ||
              t.find(".muhiku-plug-panel-sidebar a").first().addClass("active"),
            p(".muhiku-plug-panel-content")
              .find(".mhk-panel-content-section")
              .hasClass("active") ||
              p(".muhiku-plug-panel-content")
                .find(".mhk-panel-content-section")
                .first()
                .addClass("active")),
          history.replaceState({}, null, m.updateQueryString("tab", e)),
          m.switchPanel(e);
      },
      updateQueryString: function (e, t, i) {
        i = i || window.location.href;
        var o = new RegExp("([?&])" + e + "=.*?(&|#|$)(.*)", "gi");
        if (o.test(i))
          return null != t
            ? i.replace(o, "$1" + e + "=" + t + "$2$3")
            : ((i = (n = i.split("#"))[0]
                .replace(o, "$1$3")
                .replace(/(&|\?)$/, "")),
              "undefined" != typeof n[1] && null !== n[1] && (i += "#" + n[1]),
              i);
        if (null == t) return i;
        var n,
          o = -1 !== i.indexOf("?") ? "&" : "?";
        return (
          (i = (n = i.split("#"))[0] + o + e + "=" + t),
          "undefined" != typeof n[1] && null !== n[1] && (i += "#" + n[1]),
          i
        );
      },
      switchPanel: function (e) {
        "field-options" === e && m.switchToFieldOptionPanel();
      },
      switchToFieldOptionPanel: function (e) {
        p(".muhiku-plug-field-options").find(".no-fields").hide(),
          p(".mhk-admin-field-wrapper .muhiku-plug-field").removeClass(
            "active"
          ),
          p("#muhiku-plug-panel-fields").addClass("active"),
          p(".muhiku-plug-fields-tab").find("a").removeClass("active"),
          p(".muhiku-plug-fields-tab").find("a").last().addClass("active"),
          p(".muhiku-plug-add-fields").hide(),
          p(".muhiku-plug-field-options").show(),
          p(".muhiku-plug-field-options")
            .find(".muhiku-plug-field-option")
            .hide(),
          p(".mhk-tab-lists").find("li a").removeClass("active"),
          p(".mhk-tab-lists")
            .find("li.mhk-panel-field-options-button a")
            .addClass("active"),
          p(document.body).trigger("mhk-init-switch-field-options"),
          void 0 !== e
            ? (p("#muhiku-plug-field-option-" + e).show(),
              p("#muhiku-plug-field-" + e).addClass("active"))
            : 0 < p(".mhk-admin-field-wrapper .muhiku-plug-field").length
            ? (p(".mhk-admin-field-wrapper .muhiku-plug-field")
                .eq(0)
                .addClass("active"),
              p(
                "#muhiku-plug-field-option-" +
                  p(".mhk-admin-field-wrapper .muhiku-plug-field")
                    .eq(0)
                    .attr("data-field-id")
              ).show())
            : p(".muhiku-plug-field-options").find(".no-fields").show();
      },
      bindFields: function () {
        p(".mhk-admin-field-wrapper")
          .sortable({
            items: ".mhk-admin-row",
            axis: "y",
            cursor: "move",
            opacity: 0.65,
            scrollSensitivity: 40,
            forcePlaceholderSize: !0,
            placeholder: "mhk-sortable-placeholder",
            containment: ".muhiku-plug-panel-content",
            start: function (e, t) {
              t.item.css({
                backgroundColor: "#f7fafc",
                border: "1px dashed #5d96ee",
              });
            },
            stop: function (e, t) {
              t.item.removeAttr("style");
            },
          })
          .disableSelection(),
          p(".mhk-admin-grid")
            .sortable({
              items: '> .muhiku-plug-field[data-field-type!="repeater-fields"]',
              delay: 100,
              opacity: 0.65,
              cursor: "move",
              scrollSensitivity: 40,
              forcePlaceholderSize: !0,
              connectWith: ".mhk-admin-grid",
              appendTo: document.body,
              containment: ".muhiku-plug-field-wrap",
              out: function (e) {
                p(".mhk-admin-grid").removeClass("mhk-hover"),
                  p(e.target).removeClass("mhk-item-hover"),
                  p(e.target)
                    .closest(".mhk-admin-row")
                    .removeClass("mhk-hover"),
                  m.checkEmptyGrid();
              },
              over: function (e, t) {
                p(".mhk-admin-grid").addClass("mhk-hover"),
                  p(e.target).addClass("mhk-item-hover"),
                  p(e.target).closest(".mhk-admin-row").addClass("mhk-hover"),
                  m.checkEmptyGrid();
              },
              receive: function (e, t) {
                t.sender.is("button") && m.fieldDrop(t.helper);
              },
              update: function (e, t) {
                p(document).trigger("mhk_sort_update_complete", {
                  event: e,
                  ui: t,
                });
              },
              stop: function (e, t) {
                t.item.removeAttr("style"), m.checkEmptyGrid();
              },
            })
            .disableSelection(),
          p(".mhk-registered-buttons button.mhk-registered-item")
            .draggable({
              delay: 200,
              cancel: !1,
              scroll: !1,
              revert: "invalid",
              scrollSensitivity: 40,
              forcePlaceholderSize: !0,
              start: function () {
                p(this).addClass("field-dragged");
              },
              helper: function () {
                return p(this)
                  .clone()
                  .insertAfter(
                    p(this)
                      .closest(".muhiku-plug-tab-content")
                      .siblings(".muhiku-plug-fields-tab")
                  );
              },
              stop: function () {
                p(this).removeClass("field-dragged");
              },
              opacity: 0.75,
              containment: "#muhiku-plug-builder",
              connectToSortable: ".mhk-admin-grid",
            })
            .disableSelection(),
          p(".mhk-registered-item.mhk-repeater-field").draggable(
            "option",
            "connectToSortable",
            ".mhk-repeatable-grid"
          ),
          p(".mhk-admin-row").on("mouseenter mouseleave", function (e) {
            e.buttons < 1 &&
              ("mouseenter" === e.type
                ? p(this).addClass("mhk-hover")
                : p(".mhk-admin-row").removeClass("mhk-hover"));
          }),
          p(".muhiku-plug-panel-content").on("scroll", function () {
            p(".mhk-admin-grid").sortable("refreshPositions"),
              p(".mhk-admin-field-wrapper").sortable("refreshPositions");
          });
      },
      fieldTabChoice: function (e) {
        p(".muhiku-plug-tab-content").scrollTop(0),
          p(".muhiku-plug-fields-tab a").removeClass("active"),
          p(".muhiku-plug-field, .muhiku-plug-title-desc").removeClass(
            "active"
          ),
          p("#" + e).addClass("active"),
          "add-fields" === e
            ? (p(".muhiku-plug-add-fields").show(),
              p(".muhiku-plug-field-options").hide())
            : ("field-options" === e
                ? ((e = p(".muhiku-plug-field").first().data("field-id")),
                  p(".muhiku-plug-field-options").show(),
                  p(".muhiku-plug-field").first().addClass("active"))
                : p("#muhiku-plug-field-" + e).addClass("active"),
              p(".muhiku-plug-field-option").hide(),
              p("#muhiku-plug-field-option-" + e).show(),
              p(".muhiku-plug-add-fields").hide());
      },
      bindFormPreview: function () {},
      bindFormPreviewWithKeyEvent: function () {
        p("body").on("keydown", function (e) {
          (e.ctrlKey || e.metaKey) &&
            (("p" !== String.fromCharCode(e.which).toLowerCase() &&
              80 !== e.which) ||
              (e.preventDefault(), window.open(c.preview_url)));
        });
      },
      bindFormEntriesWithKeyEvent: function () {
        p("body").on("keydown", function (e) {
          (e.ctrlKey || e.metaKey) &&
            (("e" !== String.fromCharCode(e.which).toLowerCase() &&
              69 !== e.which) ||
              (e.preventDefault(), window.open(c.entries_url)));
        });
      },
      bindGridSwitcher: function () {
        p("body").on("click", ".mhk-show-grid", function (e) {
          e.stopPropagation(),
            m.checkEmptyGrid(),
            p(this)
              .closest(".mhk-toggle-row")
              .find(".mhk-toggle-row-content")
              .stop(!0)
              .slideToggle(200);
        }),
          p(document).on("click", function () {
            m.checkEmptyGrid(),
              p(".mhk-show-grid")
                .closest(".mhk-toggle-row")
                .find(".mhk-toggle-row-content")
                .stop(!0)
                .slideUp(200);
          });
        p("body").on("click", ".mhk-grid-selector", function () {
          var e = p(this).closest(".mhk-admin-row");
          if (!p(this).hasClass("active")) {
            var t = parseInt(p(this).attr("data-mhk-grid"), 10);
            if (!(4 < t)) {
              var i = p(
                  '<div class="mhk-admin-grid mhk-grid-' +
                    t +
                    ' ui-sortable mhk-empty-grid" />'
                ),
                o = p("<div/>");
              p.each(e.find(".mhk-admin-grid"), function () {
                p(this)
                  .children("*")
                  .each(function () {
                    o.append(p(this).clone());
                  });
              }),
                e.find(".mhk-admin-grid").remove(),
                e.find(".mhk-clear ").remove(),
                e.append('<div class="clear mhk-clear"></div>');
              for (var n = 1; n <= t; n++)
                i.attr("data-grid-id", n), e.append(i.clone());
              e.append('<div class="clear mhk-clear"></div>'),
                e.find(".mhk-admin-grid").eq(0).append(o.html()),
                e.find(".mhk-grid-selector").removeClass("active"),
                p(this).addClass("active"),
                m.bindFields();
            }
          }
        });
      },
      fieldDrop: function (r) {
        var e = r.attr("data-field-type");
        if (
          [
            "file-upload",
            "payment-total",
            "image-upload",
            "signature",
          ].includes(e) &&
          r.closest(".mhk-admin-row").hasClass("mhk-repeater-fields")
        )
          return (
            p.confirm({
              title: !1,
              content: "This field cannot be added to Repeater Fields",
              type: "red",
              closeIcon: !1,
              backgroundDismiss: !1,
              icon: "dashicons dashicons-warning",
              buttons: {
                cancel: { text: c.i18n_close, btnClass: "btn-default" },
              },
            }),
            r.remove(),
            !1
          );
        r
          .css({ left: "0", width: "100%" })
          .append('<i class="spinner is-active"></i>'),
          p.ajax({
            url: c.ajax_url,
            type: "POST",
            data: {
              action: "everest_forms_new_field_" + e,
              security: c.mhk_field_drop_nonce,
              field_type: e,
              form_id: c.form_id,
            },
            beforeSend: function () {
              p(document.body).trigger("init_field_options_toggle");
            },
            success: function (e) {
              var t = e.data.preview,
                i = e.data.options,
                o = e.data.form_field_id,
                n = e.data.field.type,
                s = p(t).attr("id"),
                e = p(t).attr("data-field-id");
              p("#muhiku-plug-field-id").val(o),
                p(".muhiku-plug-field-options").find(".no-fields").hide(),
                p(".muhiku-plug-field-options").append(i),
                p(
                  ".muhiku-plug-field-option-row-icon_color input.colorpicker"
                ).wpColorPicker({
                  change: function (e) {
                    var t = p(this),
                      i = t.val(),
                      t = t
                        .closest(".muhiku-plug-field-option-row")
                        .data("field-id");
                    p("#muhiku-plug-field-" + t + " .rating-icon svg").css(
                      "fill",
                      i
                    );
                  },
                }),
                r.after(t),
                null !== p("#muhiku-plug-panel-field-settings-enable_survey") &&
                  p("#muhiku-plug-panel-field-settings-enable_survey").prop(
                    "checked"
                  ) &&
                  p("#muhiku-plug-field-option-" + e + "-survey_status").prop(
                    "checked",
                    !0
                  ),
                null !== p("#muhiku-plug-panel-field-settings-enable_quiz") &&
                  p("#muhiku-plug-panel-field-settings-enable_quiz").prop(
                    "checked"
                  ) &&
                  (p("#muhiku-plug-field-option-" + e + "-quiz_status").prop(
                    "checked",
                    !0
                  ),
                  p("#muhiku-plug-field-option-" + e + "-quiz_status")
                    .closest(".muhiku-plug-field-option-row-quiz_status")
                    .siblings(".everst-forms-field-quiz-settings")
                    .removeClass("muhiku-plug-hidden")
                    .addClass("muhiku-plug-show")),
                r.remove(),
                p(document.body).trigger("init_tooltips"),
                p(document.body).trigger("init_field_options_toggle"),
                p(document.body).trigger("mhk_after_field_append", [s]),
                m.conditionalLogicAppendField(s),
                m.conditionalLogicAppendFieldIntegration(s),
                m.paymentFieldAppendToQuantity(s),
                m.paymentFieldAppendToDropdown(e, n),
                m.init_datepickers(),
                p(
                  "#muhiku-plug-field-option-" + e + "-enable_min_max_time"
                ).hide(),
                p(
                  "label[for=muhiku-plug-field-option-" +
                    e +
                    "-enable_min_max_time]"
                ).hide(),
                p(
                  "label[for=muhiku-plug-field-option-" +
                    e +
                    "-select_min_time]"
                ).hide(),
                p(
                  "label[for=muhiku-plug-field-option-" +
                    e +
                    "-select_max_time]"
                ).hide(),
                p("#muhiku-plug-field-option-" + e + "-min_time_hour")
                  .parent()
                  .hide(),
                p("#muhiku-plug-field-option-" + e + "-max_time_hour")
                  .parent()
                  .hide(),
                p(document.body).trigger("mhk_field_drop_complete", [
                  n,
                  e,
                  t,
                  i,
                ]),
                m.checkEmptyGrid();
            },
          });
      },
      conditionalLogicAppendField: function (n) {
        var e = p("#" + n),
          s = e.index(),
          r = p(".mhk-field-conditional-field-select"),
          a = e.attr("data-field-type"),
          d = e.attr("data-field-id"),
          l = e.find(".label-title .text ").text();
        p.fn.insertAt = function (e, t, i) {
          var o = p.makeArray(this.children().clone(!0));
          o.splice(t, 0, e),
            p.each(o, function (e, t) {
              i === p(t)[0].value && ((p(t)[0].selected = !0), (o[e] = t));
            }),
            this.empty().append(o);
        };
        var f = d;
        r.each(function (o, e) {
          var t = p(e).val(),
            i = n.replace("muhiku-plug-field-", ""),
            e = p(e).attr("name");
          i === e.substring(e.indexOf("[") + 1, e.indexOf("]"))
            ? p(".mhk-admin-row .mhk-admin-grid .muhiku-plug-field").each(
                function () {
                  var e = p(this).data("field-type"),
                    t = p(this).data("field-id"),
                    i = p(this).find(".label-title span").first().text();
                  (field_to_be_restricted = []),
                    (field_to_be_restricted = [
                      "html",
                      "title",
                      "address",
                      "image-upload",
                      "file-upload",
                      "date-time",
                      "hidden",
                      "scale-rating",
                      "likert",
                    ]),
                    -1 === p.inArray(e, field_to_be_restricted) &&
                      f !== t &&
                      r
                        .eq(o)
                        .append(
                          '<option class="mhk-conditional-fields" data-field_type="' +
                            e +
                            '" data-field_id="' +
                            t +
                            '" value="' +
                            t +
                            '">' +
                            i +
                            "</option>"
                        );
                }
              )
            : ((e =
                '<option class="mhk-conditional-fields" data-field_type="' +
                a +
                '" data-field_id="' +
                d +
                '" value="' +
                d +
                '">' +
                l +
                "</option>"),
              "html" !== a &&
                "title" !== a &&
                "address" !== a &&
                "image-upload" !== a &&
                "file-upload" !== a &&
                "date-time" !== a &&
                "hidden" !== a &&
                "likert" !== a &&
                "scale-rating" !== a &&
                r.eq(o).insertAt(e, s, t));
        });
      },
      paymentFieldAppendToQuantity: function (e) {
        var t = p("#" + e),
          i = p(".muhiku-plug-field-option-row-map_field select"),
          o = t.attr("data-field-type"),
          e = t.attr("data-field-id"),
          t = t.find(".label-title .text ").text();
        ("payment-single" !== o &&
          "payment-multiple" !== o &&
          "payment-checkbox" !== o) ||
          i.append('<option value="' + e + '">' + t + "</option>");
      },
      paymentFieldAppendToDropdown: function (e, t) {
        var i;
        "payment-quantity" === t &&
          ((i = p("#muhiku-plug-field-option-" + e + "-map_field")),
          [
            "payment-checkbox",
            "payment-multiple",
            "payment-single",
            "range-slider",
          ].forEach(function (e) {
            p(".muhiku-plug-field-" + e).each(function () {
              if ("range-slider" === p(this).attr("data-field-type")) {
                if (
                  "true" !==
                  p(this)
                    .find(".mhk-range-slider-preview")
                    .attr("data-enable-payment-slider")
                )
                  return;
                (e = p(this).attr("data-field-id")),
                  (t = p(this).find(".label-title .text").text());
              }
              var e = p(this).attr("data-field-id"),
                t = p(this).find(".label-title .text").text();
              i.append('<option value="' + e + '">' + t + "</option>");
            });
          }));
      },
      conditionalLogicAppendFieldIntegration: function (i) {
        var n = p("#" + i),
          s = n.index(),
          r = p(".mhk-provider-conditional").find(
            ".mhk-conditional-field-select"
          ),
          a = n.attr("data-field-type"),
          d = n.attr("data-field-id"),
          l = n.find(".label-title .text ").text();
        (p.fn.insertAt = function (e, t) {
          var i = p.makeArray(this.children().clone(!0));
          i.splice(t, 0, e), this.empty().append(i);
        }),
          r.each(function (o, e) {
            var t = i.replace("muhiku-plug-field-", ""),
              e = p(e).attr("name");
            t === e.substring(e.indexOf("[") + 1, e.indexOf("]"))
              ? p(".mhk-admin-row .mhk-admin-grid .muhiku-plug-field").each(
                  function () {
                    var e = p(this).data("field-type"),
                      t = p(this).data("field-id"),
                      i = p(this).find(".label-title span").first().text();
                    (field_to_be_restricted = []),
                      (field_to_be_restricted = [
                        "html",
                        "title",
                        "address",
                        "image-upload",
                        "file-upload",
                        "date-time",
                        "hidden",
                        "scale-rating",
                        "likert",
                        n.attr("data-field-type"),
                      ]),
                      -1 === p.inArray(e, field_to_be_restricted) &&
                        r
                          .eq(o)
                          .append(
                            '<option class="mhk-conditional-fields" data-field_type="' +
                              e +
                              '" data-field_id="' +
                              t +
                              '" value="' +
                              t +
                              '">' +
                              i +
                              "</option>"
                          );
                  }
                )
              : ((e =
                  '<option class="mhk-conditional-fields" data-field_type="' +
                  a +
                  '" data-field_id="' +
                  d +
                  '" value="' +
                  d +
                  '">' +
                  l +
                  "</option>"),
                "html" !== a &&
                  "title" !== a &&
                  "address" !== a &&
                  "image-upload" !== a &&
                  "file-upload" !== a &&
                  "date-time" !== a &&
                  "hidden" !== a &&
                  "likert" !== a &&
                  "scale-rating" !== a &&
                  r.eq(o).insertAt(e, s));
          });
      },
      conditionalLogicRemoveField: function (e) {
        p(
          ".mhk-field-conditional-field-select option[value = " + e + " ]"
        ).remove();
      },
      conditionalLogicRemoveFieldIntegration: function (e) {
        p(
          ".mhk-provider-conditional .mhk-conditional-field-select option[value = " +
            e +
            " ]"
        ).remove();
      },
      paymentFieldRemoveFromQuantity: function (e) {
        p(
          ".muhiku-plug-field-option-row-map_field select option[value = " +
            e +
            " ]"
        ).remove();
      },
      bindFieldSettings: function () {
        p("body").on(
          "click",
          ".muhiku-plug-preview .muhiku-plug-field, .muhiku-plug-preview .muhiku-plug-field .muhiku-plug-field-setting",
          function (e) {
            e.preventDefault();
            e = p(this).closest(".muhiku-plug-field").attr("data-field-id");
            p(".muhiku-plug-tab-content").scrollTop(0),
              m.switchToFieldOptionPanel(e);
          }
        );
      },
      toggleLabelEdit: function (e, t) {
        p(e).toggleClass("muhiku-plug-hidden"),
          p(t).toggleClass("muhiku-plug-hidden"),
          p(t).is(":visible") && p(t).focus();
      },
      bindToggleHandleActions: function () {
        p("body").on("click", ".toggle-handle", function (e) {
          var t = p(this).data("label"),
            i = p(this).data("input");
          p(i).is(":visible") || m.toggleLabelEdit(t, i);
        });
      },
      bindLabelEditInputActions: function () {
        p("body").on("focusout", ".label-edit-input", function (e) {
          var t = p(this).data("label");
          m.toggleLabelEdit(t, this);
        });
      },
      bindSyncedInputActions: function () {
        p("body").on("input", ".sync-input", function (e) {
          var t = p(this).val(),
            i = p(this).data("sync-targets");
          t && i && p(i).text(t);
        });
      },
    };
  m.init();
})(jQuery, window.mhk_data),
  jQuery(function () {
    "checked" !=
      jQuery(
        "#muhiku-plug-panel-field-settingsemail-mhk_send_confirmation_email"
      ).attr("checked") &&
      jQuery(
        "#muhiku-plug-panel-field-settingsemail-mhk_send_confirmation_email-wrap"
      )
        .nextAll()
        .hide(),
      jQuery(
        "#muhiku-plug-panel-field-settingsemail-mhk_send_confirmation_email"
      ).on("change", function () {
        "checked" != jQuery(this).attr("checked")
          ? jQuery(
              "#muhiku-plug-panel-field-settingsemail-mhk_send_confirmation_email-wrap"
            )
              .nextAll()
              .hide()
          : jQuery(
              "#muhiku-plug-panel-field-settingsemail-mhk_send_confirmation_email-wrap"
            )
              .nextAll()
              .show();
      });
    var e = jQuery(
      "#muhiku-plug-panel-field-settings-redirect_to option:selected"
    ).val();
    "same" == e
      ? (jQuery("#muhiku-plug-panel-field-settings-custom_page-wrap").hide(),
        jQuery("#muhiku-plug-panel-field-settings-external_url-wrap").hide())
      : "custom_page" == e
      ? (jQuery("#muhiku-plug-panel-field-settings-custom_page-wrap").show(),
        jQuery("#muhiku-plug-panel-field-settings-external_url-wrap").hide())
      : "external_url" == e &&
        (jQuery("#muhiku-plug-panel-field-settings-external_url-wrap").show(),
        jQuery("#muhiku-plug-panel-field-settings-custom_page-wrap").hide()),
      jQuery("#muhiku-plug-panel-field-settings-redirect_to").on(
        "change",
        function () {
          "same" == this.value
            ? (jQuery(
                "#muhiku-plug-panel-field-settings-custom_page-wrap"
              ).hide(),
              jQuery(
                "#muhiku-plug-panel-field-settings-external_url-wrap"
              ).hide())
            : "custom_page" == this.value
            ? (jQuery(
                "#muhiku-plug-panel-field-settings-custom_page-wrap"
              ).show(),
              jQuery(
                "#muhiku-plug-panel-field-settings-external_url-wrap"
              ).hide())
            : "external_url" == this.value &&
              (jQuery(
                "#muhiku-plug-panel-field-settings-custom_page-wrap"
              ).hide(),
              jQuery(
                "#muhiku-plug-panel-field-settings-external_url-wrap"
              ).show());
        }
      ),
      jQuery(".mhk-panel-field-options-button.mhk-disabled-tab").hide(),
      jQuery(".muhiku-plug-conditional-field-settings-redirect_to").each(
        function () {
          var e = this.value;
          "custom_page" == e
            ? (jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-custom_page")
                .show(),
              jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-external_url")
                .hide())
            : "external_url" == e
            ? (jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-custom_page")
                .hide(),
              jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-external_url")
                .show())
            : (jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-custom_page")
                .hide(),
              jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-external_url")
                .hide());
        }
      ),
      jQuery(document).on(
        "change",
        ".muhiku-plug-conditional-field-settings-redirect_to",
        function () {
          "custom_page" == this.value
            ? (jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-custom_page")
                .show(),
              jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-external_url")
                .hide())
            : "external_url" == this.value
            ? (jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-custom_page")
                .hide(),
              jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-external_url")
                .show())
            : (jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-custom_page")
                .hide(),
              jQuery(this)
                .parents(".mhk-field-conditional-container")
                .find(".muhiku-plug-conditional-field-settings-external_url")
                .hide());
        }
      );
  }),
  jQuery(function (f) {
    f(document.body)
      .on("init_add_fields_toogle", function () {
        f(".muhiku-plug-add-fields").on(
          "click",
          ".muhiku-plug-add-fields-group > a",
          function (e) {
            e.preventDefault(),
              f(this)
                .parent(".muhiku-plug-add-fields-group")
                .toggleClass("closed")
                .toggleClass("open");
          }
        ),
          f(".muhiku-plug-add-fields").on(
            "click",
            ".muhiku-plug-add-fields-group a",
            function () {
              f(this).next(".mhk-registered-buttons").stop().slideToggle();
            }
          ),
          f(".muhiku-plug-add-fields-group.closed").each(function () {
            f(this).find(".mhk-registered-buttons").hide();
          });
      })
      .trigger("init_add_fields_toogle"),
      f(document.body).on(
        "click",
        ".muhiku-plug-field-option .muhiku-plug-field-option-group > a",
        function (e) {
          e.preventDefault(),
            f(this)
              .parent(".muhiku-plug-field-option-group")
              .toggleClass("closed")
              .toggleClass("open");
        }
      ),
      f(document.body).on(
        "click",
        ".muhiku-plug-field-option .muhiku-plug-field-option-group a",
        function (e) {
          f(e.target).filter(":input, option, .sort").length ||
            f(this)
              .next(".muhiku-plug-field-option-group-inner")
              .stop()
              .slideToggle();
        }
      ),
      f(document.body)
        .on("init_field_options_toggle", function () {
          f(".muhiku-plug-field-option-group.closed").each(function () {
            f(this).find(".muhiku-plug-field-option-group-inner").hide();
          });
        })
        .trigger("init_field_options_toggle"),
      f(document).on("click", function () {
        f(".mhk-smart-tag-lists").hide();
      }),
      f(document.body).on(
        "click",
        ".mhk-toggle-smart-tag-display",
        function (e) {
          e.stopPropagation(),
            f(".mhk-smart-tag-lists").hide(),
            f(".mhk-smart-tag-lists ul").empty(),
            f(this).parent().find(".mhk-smart-tag-lists").toggle("show");
          e = f(this).data("type");
          !(function (o, e, t) {
            var n = [],
              s = [],
              r = [];
            if (
              (f(".mhk-admin-row .mhk-admin-grid .muhiku-plug-field").each(
                function () {
                  var e,
                    t = f(this).data("field-type"),
                    i = f(this).data("field-id");
                  o === t
                    ? ((e = f(this).find(".label-title span").first().text()),
                      (r[i] = e))
                    : ((e = f(this).find(".label-title span").first().text()),
                      (n[i] = e)),
                    (s[i] = f(this).find(".label-title span").first().text());
                }
              ),
              "other" === e || "all" === e)
            ) {
              var i = mhk_data.smart_tags_other;
              for (a in i)
                f(t)
                  .parent()
                  .find(".mhk-smart-tag-lists .mhk-others")
                  .append(
                    '<li class = "smart-tag-field" data-type="other" data-field_id="' +
                      a +
                      '">' +
                      i[a] +
                      "</li>"
                  );
            }
            if ("fields" === e || "all" === e)
              if ("email" === o)
                for (var a in (Object.keys(r).length < 1
                  ? f(t)
                      .parent()
                      .find(
                        '.mhk-smart-tag-lists .smart-tag-title:not(".other-tag-title")'
                      )
                      .addClass("muhiku-plug-hidden")
                  : f(t)
                      .parent()
                      .find(
                        '.mhk-smart-tag-lists .smart-tag-title:not(".other-tag-title")'
                      )
                      .removeClass("muhiku-plug-hidden"),
                f(t)
                  .parent()
                  .find(".mhk-smart-tag-lists .other-tag-title")
                  .remove(),
                f(t).parent().find(".mhk-smart-tag-lists .mhk-others").remove(),
                f(t)
                  .parent()
                  .find(".mhk-smart-tag-lists")
                  .append(
                    '<div class="smart-tag-title other-tag-title">Others</div><ul class="mhk-others"></ul>'
                  ),
                f(t)
                  .parent()
                  .find(".mhk-smart-tag-lists .mhk-others")
                  .append(
                    '<li class="smart-tag-field" data-type="other" data-field_id="admin_email">Site Admin Email</li><li class="smart-tag-field" data-type="other" data-field_id="user_email">User Email</li>'
                  ),
                r))
                  f(t)
                    .parent()
                    .find(".mhk-smart-tag-lists .mhk-fields")
                    .append(
                      '<li class = "smart-tag-field" data-type="field" data-field_id="' +
                        a +
                        '">' +
                        r[a] +
                        "</li>"
                    );
              else
                for (var d in (Object.keys(s).length < 1
                  ? f(t)
                      .parent()
                      .find(
                        '.mhk-smart-tag-lists .smart-tag-title:not(".other-tag-title")'
                      )
                      .addClass("muhiku-plug-hidden")
                  : f(t)
                      .parent()
                      .find(
                        '.mhk-smart-tag-lists .smart-tag-title:not(".other-tag-title")'
                      )
                      .removeClass("muhiku-plug-hidden"),
                s))
                  f(t)
                    .parent()
                    .find(".mhk-smart-tag-lists .mhk-fields")
                    .append(
                      '<li class = "smart-tag-field" data-type="field" data-field_id="' +
                        d +
                        '">' +
                        s[d] +
                        "</li>"
                    );
            {
              var l;
              "calculations" === e &&
                ((l = ["number", "payment-single", "range-slider"]),
                f(document)
                  .find(".muhiku-plug-field")
                  .each(function () {
                    l.includes(f(this).attr("data-field-type")) &&
                      f(t)
                        .parents(
                          ".muhiku-plug-field-option-row-calculation_field"
                        )
                        .attr("data-field-id") !==
                        f(this).attr("data-field-id") &&
                      f(t)
                        .parent()
                        .find(".mhk-smart-tag-lists .calculations")
                        .append(
                          '<li class = "smart-tag-field" data-type="field" data-field_id="' +
                            f(this).attr("data-field-id") +
                            '">' +
                            f(this).find(".label-title .text").text() +
                            "</li>"
                        );
                  }));
            }
          })(f(this).data("fields"), e, f(this));
        }
      ),
      f(document.body).on("click", ".smart-tag-field", function (e) {
        var t = f(this).data("field_id"),
          i = f(this).text(),
          o = f(this).data("type"),
          n = f(this).parent().parent().parent(),
          s = n.find("input[type=text]"),
          n = n.find("textarea");
        if (
          "fullname" !== t &&
          "email" !== t &&
          "subject" !== t &&
          "message" !== t &&
          "other" !== o
        ) {
          for (var i = i.split(/[\s-_]/), r = 0; r < i.length; r++)
            i[r] =
              0 === r
                ? i[r].charAt(0).toLowerCase() + i[r].substr(1)
                : i[r].charAt(0).toUpperCase() + i[r].substr(1);
          t = (i = i.join("")) + "_" + t;
        }
        "field" === o
          ? (s.val(s.val() + '{field_id="' + t + '"}'),
            n.val(n.val() + '{field_id="' + t + '"}'),
            n.trigger("change"))
          : "other" === o &&
            (s.val(s.val() + "{" + t + "}"), n.val(n.val() + "{" + t + "}"));
      }),
      f(document).on(
        "change",
        ".wp-list-table .muhiku-plug-toggle-form input",
        function (e) {
          e.stopPropagation(),
            f.post(mhk_data.ajax_url, {
              action: "everest_forms_enabled_form",
              security: mhk_data.mhk_enabled_form,
              form_id: f(this).data("form_id"),
              enabled: f(this).prop("checked") ? 1 : 0,
            });
        }
      ),
      f(document).on(
        "change",
        ".mhk-content-email-settings .mhk-toggle-switch input",
        function (e) {
          var t = f(this),
            i = t.prop("checked");
          !1 === i
            ? (t.val(""),
              t
                .closest(".mhk-content-email-settings")
                .find(".email-disable-message")
                .remove(),
              t
                .closest(".mhk-content-section-title")
                .siblings(".mhk-content-email-settings-inner")
                .addClass("muhiku-plug-hidden"),
              f(
                '<p class="email-disable-message muhiku-plug-notice muhiku-plug-notice-info">' +
                  mhk_data.i18n_email_disable_message +
                  "</p>"
              ).insertAfter(t.closest(".mhk-content-section-title")))
            : !0 === i &&
              (t.val("1"),
              t
                .closest(".mhk-content-section-title")
                .siblings(".mhk-content-email-settings-inner")
                .removeClass("muhiku-plug-hidden"),
              t
                .closest(".mhk-content-email-settings")
                .find(".email-disable-message")
                .remove());
        }
      ),
      f(document).on(
        "click",
        ".muhiku-plug-min-max-date-format input",
        function () {
          var e = f(this)
              .closest(".muhiku-plug-date")
              .find(".muhiku-plug-min-date")
              .val(),
            t = f(this)
              .closest(".muhiku-plug-date")
              .find(".muhiku-plug-min-date")
              .val();
          f(this).is(":checked")
            ? (f(".muhiku-plug-min-max-date-option").removeClass(
                "muhiku-plug-hidden"
              ),
              "" === e &&
                f(".muhiku-plug-min-date")
                  .addClass("flatpickr-field")
                  .flatpickr({
                    disableMobile: !0,
                    onChange: function (e, t, i) {
                      f(".muhiku-plug-min-date").val(t);
                    },
                    onOpen: function (e, t, i) {
                      i.set("maxDate", f(".muhiku-plug-max-date").val());
                    },
                  }),
              "" === t &&
                f(".muhiku-plug-max-date")
                  .addClass("flatpickr-field")
                  .flatpickr({
                    disableMobile: !0,
                    onChange: function (e, t, i) {
                      f(".muhiku-plug-max-date").val(t);
                    },
                    onOpen: function (e, t, i) {
                      i.set("minDate", f(".muhiku-plug-min-date").val());
                    },
                  }))
            : f(".muhiku-plug-min-max-date-option").addClass(
                "muhiku-plug-hidden"
              );
        }
      );
  });
